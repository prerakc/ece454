#############################################################################################
utorid: chaud496
name: PRERAK CHAUDHARI
email: prerak.chaudhari@mail.utoronto.ca
#############################################################################################
Q1: List the function you think might be important to optimize to in lab2's soruce code?
A1: processMoveDown, processMoveLeft, processMoveRight, processRotateCCW, processMirrorX, processRotateCW, processMoveUp, processMirrorY, implementation_driver
Do not modify the "###" lines or the question line above your answer. 
#############################################################################################
Q2: Report the 6 measurements using the slowest method of compilation as a baseline, report the speedup for each of the five measurements. Eg., if gcov was the slowest, and -g was twice as fast as gcov, then the speedup for -g relative to gcov would be 2.0.
A2:
gprof: 1.42982456140351
gcov: 1.23484848484848
g: 1.66326530612245
O2: 1.15602836879433
O3: 1
Os: 1.11643835616438
#############################################################################################
Q3: Which is the slowest and why?
A3: -O3 had the slowest compilation time because the flag tells the compiler to perform a lot of optimizations.
#############################################################################################
Q4: Which is the fastest and why?
A4: -g had the fastest compilation time because the flag simply tells the compiler to include debugging information.
#############################################################################################
Q5: Which of gprof and gcov is faster and why?
A5: gprof is faster than gcov because the compiler has to inject less code to track function calls and sample time spent in each function as opposed to tracking how many times each line was executed.
#############################################################################################
Q6: Report the six measurements using the smallest method of compilation as a baseline, report the relative size increase for each of the six measurements. Eg., if -g was the smallest, and gprof was twice the size of -g, then the relative size increase for gprof relative to -g would be 2.0
A6:
gprof: 2.10201268265784
gcov: 3.21367521367521
g: 2.09511993382961
O2: 1.13813068651778
O3: 1.14006065618969
Os: 1
#############################################################################################
Q7: Which is the smallest and why?
A7: -Os had the smallest binary size because the flag tells the compiler to optimize for size.
#############################################################################################
Q8: Which is the largest and why?
A8: -gcov had the largest binary size because the profiling specified by this flag requires the compiler to insert new code and data structures.
#############################################################################################
Q9: Which of gprof and gcov is smaller and why?
A9: gprof is smaller than gcov because the code required to track function calls and sample time spent in each function is smaller than the code required to track how many times each line was executed.
#############################################################################################
Q10: Report the six measurements using the slowest measurement as a baseline, also report the speedup for each version.
A10:
gprof: 1.06567292308893
gcov: 1
g: 1.0537891649946
O2: 3.46573604060914
O3: 3.90533390533391
Os: 3.07718309859155
#############################################################################################
Q11: Which is the slowest and why?
A11: -gcov is the slowest because the program is getting track of how many times each line of code gets executed.
#############################################################################################
Q12: Which is the fastest and why?
A12: -O3 is the fastest because it had the most number of optimizations performed at compile time to reduce code size and execution time.
#############################################################################################
Q13: Which of grof and gcov is faster and why?
A13: gprof is faster than gcov because the program had to spend less time tracking function calls and sampling time spent in each function as opposed to tracking how many times each line was executed.
#############################################################################################
Q14: For each version, list the top 3 functions (give function name and percentage execution time)
A14:
-g:
  (1) processRotateCWReference / 48.06%
  (2) copyFrame / 40.51%
  (3) processMoveUpReference / 2.09%
-O2:
  (1) processRotateCWReference / 39.16%
  (2) copyFrame / 26.93%
  (3) get_counter / 25.92%
-O3:
  (1) processRotateCCWReference / 50.72%
  (2) copyFrame / 38.56%
  (3) processRotateCWReference / 2.59%
#############################################################################################
Q15: For the "number-one" function for -O3 (the one with the greatest percentage execution time), how does its percentage execution time compare with the percentage execution time for the same function in the -g version? How is this possible? What transformation did the compiler do and to which functions?
A15: The percentage execution time for processRotateCCWReference() in the -g version was 0.00%. This is because the processRotateCCWReference() function interally calls the processRotateCWReference() function. The compiler optimized these internal function calls by replacing them with the corresponding code from the called functions.
#############################################################################################
Q16: Count the instructions for the function "number-one" function identified in the previous question and report the counts, as well as the reduction (reported as a ratio) in number of instructions for the -O3 version (ie., if the -O3 version has half as many instructions as the -g version, the reduction is 2.0x).
A16:
-g count: 39
-O3 count: 201
reduction ratio: 0.194029851x
#############################################################################################
Q17: Based only on the gcov results (ie., donâ€™t think too much about what the code says) list the functions in the order that you would focus on optimizing them for the provided lab1 inputs and why. Identify each location by its line numbers in the original source file.
A17:
---------------------------------------------------------------
|   Function                           |   Line   |   Count   |
---------------------------------------------------------------
|   processRotateCWReference	       |    224   |    1376   |
|   processMoveLeftReference	       |     78   |     200   |
|   processMoveRightReference	       |    176   |     184   |
|   processMoveUpReference	       |     29   |     144   |
|   processMoveDownReference	       |    127   |	144   |
|   processRotateCCWReference	       |    269   |	144   |
|   processMirrorXReference	       |    296   |	 88   |
|   processMirrorYReference	       |    328   |	 56   |
|   implementation_driver_reference    |    364   |	  4   |
---------------------------------------------------------------

Based only on how many times each function was executed, the functions of implementation_reference.c would be optimized in the order given above.
#############################################################################################
Q18(Bonus): Name the shortest GCC compiler flag where the compiler optimization it enables requires memory alignment. How many bytes does the data needs to be aligned?
A18: -O2 and 1 byte alignment
